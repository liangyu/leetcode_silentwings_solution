package LC1201_1500;
import java.util.*;
public class LC1332_RemovePalindromicSubsequences {
    /**
     * Given a string s consisting only of letters 'a' and 'b'. In a single step you can remove one palindromic
     * subsequence from s.
     *
     * Return the minimum number of steps to make the given string empty.
     *
     * A string is a subsequence of a given string, if it is generated by deleting some characters of a given string
     * without changing its order.
     *
     * A string is called palindrome if is one that reads the same backward as well as forward.
     *
     * Input: s = "ababa"
     * Output: 1
     *
     * Constraints:
     *
     * 0 <= s.length <= 1000
     * s only consists of letters 'a' and 'b'
     *
     * @param s
     * @return
     */
    // time = O(n), space = O(1)
    public int removePalindromeSub(String s) {
        // corner case
        if (s == null || s.length() == 0) return 0;

        return isPalin(s) ? 1 : 2;
    }

    private boolean isPalin(String s) {
        int left = 0, right = s.length() - 1;
        while (left <= right) {
            if (s.charAt(left++) != s.charAt(right--)) return false;
        }
        return true;
    }
}
/**
 * If it's empty sting, return 0;
 * If it's palindrome, return 1;
 * Otherwise, we need at least 2 operation.
 *
 * We can delete all characters 'a' in the 1st operation,
 * and then all characters 'b' in the 2nd operation.
 * So return 2 in this case
 */
